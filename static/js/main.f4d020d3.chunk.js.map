{"version":3,"sources":["recepies.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","href","target","map","text","toFixed","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecepis","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,2B,wMCmBZC,EAjBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,MAAMC,EAAoB,EAApBA,YAAYC,EAAQ,EAARA,IAC9C,OACI,yBAAKC,UAAYC,IAAMC,QACnB,4BAAKP,GACL,uBAAGQ,KAAMJ,EAAKK,OAAO,UAArB,oBACA,4BACKN,EAAYO,KAAI,SAAAP,GAAW,OACxB,4BAAKA,EAAYQ,UAGzB,2BAAIV,EAASW,QAAQ,GAArB,aACA,yBAAKC,IAAKX,EAAOY,IAAI,OC8ClBC,G,MAxDH,WAEV,IAFgB,EAIaC,mBAAS,IAJtB,mBAIVC,EAJU,KAIDC,EAJC,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,QANnB,mBAMTK,EANS,KAMFC,EANE,KAUhBC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,uCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,yBAAKzB,UAAU,OACb,0BAAM4B,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBf,UAAU,eACrC,2BAAO+B,KAAK,OAAO/B,UAAU,aAAagC,MAAOlB,EAAQmB,SAdxC,SAAAJ,GACnBd,EAAUc,EAAEzB,OAAO4B,OACnBN,QAAQC,IAAIb,MAaR,4BAAQiB,KAAK,SAAS/B,UAAU,iBAAhC,WAEF,yBAAKA,UAAU,WACdY,EAAQP,KAAI,SAAAH,GAAM,OACjB,kBAAC,EAAD,CACAgC,IAAKhC,EAAOA,OAAOiC,MACnBxC,MAAOO,EAAOA,OAAOiC,MACrBvC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,UAIrB,yBAAKC,UAAU,UAAf,sCC1CcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.f4d020d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recepies_recipe__3fxeT\"};","import React from 'react';\r\nimport style from \"./recepies.module.css\";\r\n\r\nconst Recipe = ({title,calories,image,ingredients,url}) =>{\r\n    return(\r\n        <div className ={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <a href={url} target='_blank'>Food preparation</a>\r\n            <ul>\r\n                {ingredients.map(ingredients=>(\r\n                    <li>{ingredients.text}</li>\r\n                ))}\r\n            </ul>\r\n            <p>{calories.toFixed(2)} Calories</p>\r\n            <img src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Recipe;","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\n  const App_ID = 'a5f6b531';\n  const App_Key = '87259a7a96af379302a4221d4dc3847a\t';\n  const[recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('pork');\n\n\n\n  useEffect(()=>{\n    getRecepis();\n  },[query]);\n\n  const getRecepis = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${App_ID}&app_key=${App_Key}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n      <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}/>\n        <button type=\"submit\" className=\"search-button\">Search</button>\n      </form>\n      <div className=\"recepes\">\n      {recipes.map(recipe => (\n        <Recipe \n        key={recipe.recipe.label} \n        title={recipe.recipe.label}  \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}\n        />\n      ))}\n      </div>\n      <div className=\"footer\">Designed by Uros Katanic   &nbsp;</div>\n    </div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}